// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

apply plugin: 'slice'

ext.generatedDir = "$project.buildDir/generated"
ext.useLocalOnly = false

def android = false
try {
    compileJava {
        options.debug = debug
    }
} catch(MissingMethodException ex) {
    // For Android builds: thrown if compileJava isn't available.
    android = true
}

def env = System.getenv()

// Determine the name of the Slice-to-Java translator
def isWindows = false
def programFiles
def slice2java = "slice2java"
def slice2freezej = "slice2freezej"
if (System.properties['os.name'].toLowerCase().contains('windows')) {
    isWindows = true
    slice2java = "slice2java.exe"
    slice2freezej = "slice2freezej.exe"

    def arch1 = env['PROCESSOR_ARCHITECTURE']
    def arch2 = env['PROCESSOR_ARCHITEW6432']
    if (arch1 == "AMD64" || arch1 == "IA64" || arch2 == "AMD64" || arch2 == "IA64") {
        programFiles = System.getenv('ProgramFiles(x86)')
    } else {
        programFiles = System.getenv('ProgramFiles')
    }
}

// Set the install prefix to defaults if not already set
if (prefix == null || prefix.length() == 0) {
    if (isWindows) {
        prefix = "C:\\Ice-${project.version}"
    } else {
        prefix = "/opt/Ice-${project.version}"
    }
}

// First check if ICE_HOME is set and it points at a valid installation
def iceHome = "/opt/Ice-${iceVersion}" //env['ICE_HOME']
if (iceHome != null && iceHome.length() > 0) {
    def translator = new File("$iceHome/bin/$slice2java")
    if (!translator.exists()) {
        throw new GradleException("Unable to find $slice2java in $iceHome, please verify ICE_HOME is " +
                "properly configured and Ice is correctly installed.")
    }
}

def iceBinDist = false
if(env['USE_BIN_DIST'] == "yes") {
    iceBinDist = true
}

// Check if we are building against source distribution
def iceDir
def iceCppDir
def iceSrcDist = false
if (!iceBinDist) {
    def f1 = new File("$rootProject.projectDir/../java/src/Ice/src/main/java/Ice/Util.java")
    if (f1.exists()) {
        iceDir = "$rootProject.projectDir/.."
        iceSrcDist = true

        if (iceHome != null && iceHome.length() > 0) {
            iceCppDir = iceHome

            def f2 = new File("$iceDir/cpp/bin/$slice2java")
            if (f2.exists()) {
                println "Found $slice2java in both $iceCppDir/bin and $iceDir/cpp/bin, $iceCppDir/bin/$slice2java will be used!"
            }
        } else {
            iceCppDir = iceDir + "/cpp"
        }

        slice.slice2java = "$iceCppDir/bin/$slice2java"
        slice.slice2freezej = "$iceCppDir/bin/$slice2freezej"
        slice.iceHome = iceCppDir
        slice.srcDist = true
    }
}

// Then, check if we're building against a binary distribution.
if (!iceDir) {
    if (iceHome != null && iceHome.length() > 0) {
        iceDir = iceHome
    }

    if (iceDir == null) {
        def f1 = new File("/usr/bin/$slice2java")
        if (f1.exists()) {
            iceDir = "/usr"
        }
    }

    if (iceDir == null && isWindows) {
        iceDir = "${programFiles}\\ZeroC\\Ice-${project.version}"
    }

    if (iceDir == null) {
        def f1 = new File("/Library/Developer/Ice-${project.version}/bin/${slice2java}")
        if (f1.exists()) {
            iceDir = "/Library/Developer/Ice-${project.version}"
        }
    }

    if (iceDir == null) {
        def f1 = new File("/opt/Ice-${project.version}/bin/${slice2java}")
        if (f1.exists())
        {
            iceDir = "/opt/Ice-${project.version}"
        }
    }

    if (iceDir == null) {
        throw new GradleException("Unable to find a valid Ice distribution, please verify ICE_HOME is properly " +
                "configured and Ice is correctly installed.")
    }

    slice.slice2java = "${iceDir}/bin/${slice2java}"
    slice.slice2freezej = "${iceDir}/bin/${slice2freezej}"
    slice.iceHome = iceDir
    slice.srcDist = false
}

// Set the slice and java jar directory
if (iceDir == "/usr") {
    ext.sliceDir = "/usr/share/Ice-${project.version}/slice"
    ext.distJarDir = "/usr/share/java"
} else {
    ext.sliceDir = "${iceDir}/slice"
    ext.distJarDir = iceSrcDist ? null : "${iceDir}/lib"
}

// Check is DESTDIR is set (non-Windows)
if (isWindows) {
    ext.DESTDIR = ""
}

ext.versionSuffix = "-${project.version}"
ext.libDir = "$rootProject.projectDir/lib"

ext.iceSourceCompatibility = 1.7
ext.iceTargetCompatibility = 1.7

ext.searchFile = { List<Closure> places, List<String> searchPaths ->
    def dirs = []
    places.each {
        def dir = it()
        if(dir != null) {
            dirs << dir + "/"
        }
    }

    def candidates = searchPaths.collect {
        def path = it
        dirs.collect {
            it.concat(path)
        }
    }.flatten()

    return candidates.find {
        new File(it).exists()
    }
}

def demoJar(name) {
    def taskName = name + "Jar"
    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: taskName, type: Jar) {
        version = ""
        baseName = name
        from(sourceSets.main.output) {
            include "**"
        }
    }

    jarTask.manifest {
        attributes("Main-Class": name.capitalize())
        attributes("Class-Path": configurations.runtime.resolve().collect { it.toURI() }.join(' '))
    }

    artifacts {
        archives jarTask
    }
}
ext {
    demoJar = this.&demoJar
}

def localDependency(artifactId) {
    if (distJarDir != null) {
        return "com.zeroc:${artifactId}:${project.version}"
    } else {
        return project(":${artifactId}")
    }
}
ext {
    localDependency = this.&localDependency
}

if (!android) {
    //
    // Find BerkeleyDB JAR
    //
    if(dbHome) {
        ext.dbJar = "${dbHome}/db.jar"
    } else {
        def subdirs
        if (isWindows) {
            if(iceBinDist){
                subdirs = [ "${iceDir}/lib/" ]
            } else {
                def thirdpartyhome = env['THIRDPARTY_HOME']
                if (thirdpartyhome == null || thirdpartyhome.length() == 0) {
                    thirdpartyhome = "${programFiles}/ZeroC/Ice-${project.version}-ThirdParty"
                }
                subdirs = [ "${thirdpartyhome}/lib/" ]
            }
        } else {
            subdirs = [
                    "/Library/Developer/Ice-${project.version}-ThirdParty/lib/",
                    "/usr/share/java/",
                    "/opt/Ice-${project.version}/lib/",
                    "/opt/db/lib/",
                    "/usr/lib/"
            ]
        }

        def candidates = ["db-5.3.28.jar", "db-5.3.21.jar", "db.jar"].collect {
            def dbJarName = it
            subdirs.collect {
                it.concat(dbJarName)
            }
        }.flatten()

        ext.dbJar = candidates.find {
            new File(it).exists()
        }
    }

    if(!ext.dbJar || !new File(ext.dbJar).exists()) {
        throw new GradleException("Unable to locate the required third party BerkeleyDB jar file `db.jar'.")
    }
}
